TO do
	signals
	builtins
	check_syntax

ERROS
	- nao sendo programa, mandar erro para fd 2 ->pode ser perror nomes dos erros nao precisam de ser iguais
	- reformular check builtin e mudar de program para flags -> adicionado path_program no pot, podemos usar program como estava
	- cat /dev/random | head > out
	- erro no append -> solved
	- cat | ls
	- erro no echo com redirects 


6 DE JUNHO
	- fazer unset
	- verificar porque nao expande novas variaves
		exemplo:
			// falta mudar strcpy para funcoes nossas, falta implementar que a variavel so passa para o env
			// quando depois de ser dada valor (export MY_VAR=BIA) seja sourced com (export MY_VAR), e falta
			// implementar para que e nova variavel criada seja expandida - possivel ser dentro do expanded dollar

			// como esta a correr agora:
			// minishell> export MY_VAR=BIA
			// minishell> env | grep BIA
			// MY_VAR=BIA
			// minishell> echo $MY_VAR
			// MY_VAR
	-fazer funcao para exit codes, tipo void	err_handle(int flag)
												if flag == 1
													exit (127)
	- resolver leaks
	- check syntax
	- expandir dentro de "" tipo echo "$PWD"
	- reformular pwd para dar erro com "-qualquercoisa"


tester (NAO ESQUECER DE APAGAR OU FAZER GIT IGNORE ANTES DE IR PARA O GIT)
		https://github.com/LucasKuhn/minishell_tester
		fazer clone dentro do minishell
		cd minishell_tester
		./tester
		ou
		./tester builtins por exemplo.

NOVAS COISAS
	utils como itoa
	.ignore_readline para ignorar os leaks do read_line
	mudanca no minishell.c para nao ter seg fault com empty prompt
	cd a funcionar bem e a ir bem para a root directory
	export a comecar, se tiveres duvidas nao exites a perguntar