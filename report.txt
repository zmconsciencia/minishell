*** LINKS UTEIS ***

readline:
	https://web.mit.edu/gnu/doc/html/rlman_2.html

history (from readline?):
	https://man7.org/linux/man-pages/man3/history.3.html
	- ver se ha videos sobre isto

bash reference manual:
	https://www.gnu.org/software/bash/manual/bash.html

writting a parser/interpreter:
	https://www.toptal.com/scala/writing-an-interpreter

*** TODO ***

	- fazer split da linha --- DONE
		- adicionar a linha à history --- DONE
		- tokens / linked list?
		- se optar por linked list, ao adicionar a lista vou fazendo parsing
		  e dando um identificador de file / cmd / flag / ...
	- se for ficheiro (ter operator antes) fazer dele um fd in
	- se for program ver se tem access 
	- ((fazer uma nova lista so com os comandos, e sem ficheiros?))
	- passar a lista para o pipex

	- ver como ler as teclas pressionadas atraves de um programa c: library? --- DONE
	- signals estao mal, fazer uma funcao dedicada e dividir entre heredoc e whatever.
	- fazer uma funcao "get_token".
	- fazer builtins

	se nao houver fecho de quotes, trato como quiser (assumir fecho no fim da string)

*** ERRORS ***

	- nao esta a assumir tab na g_line como tab
	- falta fazer muitos frees

< Makefile ls -l | wc -l > outfile < outfile wc -l

< Makefile cat | echo "cat | wc"



ter flag para saber se esta dentro de quotes
substituir pipe por ascii 2
split ascii 2

novo split por espacos, ignorando o que esta dentro de aspas


LE A PARTIR DAQUI:

puto vou te mandar isto para o git agora e a ideia até agora foi a seguinte:

1. inicia a funcao
2. trabalha a linha para conseguir separar por pipes e por espacos
3. um node entre cada pipe
4. um token entre cada espaco
5. imprime separado como descrito em cima.

isto é como está a correr. a ideia a partir daqui é:

6. manda a lista de tokens (node) para parse
7. se tiver redirect (< > >> <<) faz a funcao fill_red
8. se tiver dollar faz a sua funcao
9. caso contrario faz fill_pot


--> as funcoes estao inacabadas, ou muitas delas nem sequer estao iniciadas. acho que ainda estamos mais na fase de
	organizar ideias.
	tentei que no makefile e no .h os nomes ficassem por ordem alfabetica tal como os ficheiros estao organizados à
	esquerda. assim é mais facil nao nos esquecermos de nada. faz o esforço para manter assim sff.

--> as pastas estao todas dentro da SRCS. a pasta utils é de genéricos (misc) que dao para varias coisas
	o resto é self explanatory.

--> os builtins nao vao ser dificeis de fazer, mas parei com eles porque ficariam para a parte de execucao.

May 3rd

avancamos por ordem logica do programa até fill_red que está por completar.
	--> no fill red está a faltar tratar de:
		- <Makefile>outro
