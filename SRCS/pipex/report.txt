./pipex infile "cat" "head -5" "grep 3" "wc -l" "grep 5" outfile 

LINKS UTEIS:

	https://www.youtube.com/watch?v=6u_iPGVkfZ4&list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY&index=7

	execv
	https://www.youtube.com/watch?v=OVFEWSP7n8c&list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY&index=15
	exec 'V' stands for a vector, whereas it should receive a vector (char **)
	exec arguments must end with a null
	'E' stands for enviornment
	https://www.youtube.com/watch?v=iq7puCxsgHQ

	dup && dup2
	https://www.youtube.com/watch?v=5fnVr-zH-SE

	./pipex file1 cmd1 cmd2 file2
	
	./pipex infile "ls -l" "wc -l" "bla -sd" "jksdf -12" outfile 
	
	./pipex infile "ls -l" "wc -l" outfile 

	trocaro argv para path
	main pipex
		ver numeros de arguments
		fd = open(file1)
		(copiar file1 com dup)
		ver path cmd
		ler av[2] e fazer o que e preciso no "dup - file1" (onde encontrar o que e preciso fazer?) (usar execve para executar no "dup - file1" o cmd1??)
			fazer isto tudo num fork, porque execve para o outro programa.
			(mandar o resultado para um ** que esteja no parent process com pipe)
			voltar a fazer um fork, usar novo execve e fazer o cmd2 no **	
				fazer um pipe e mandar o resultado para o file2 que esteja no parent process


./pipex file1.txt results.txt

idea:
		while (i < argc - 1)
		{
			pid = fork();
			if (pid == -1)
				perror ("fork");
			else if (pid == 0)
			{
				path = check_access(get_path(envp), argv[i]);
				fd[0] = open(argv[1], O_RDONLY);
				fd[1] = open(argv[argc - 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
				dup2(fd[1], 1);
				if (execve(path, argVec, envp) == -1)
					perror("could not execute\n");
				// free(path);
			}
		}

WORKING MAIN

int	main(int argc, char **argv, char **envp)
{
	// int		fd[2];
	// int		pid;
	// int		i;
	// char	*path;
	// char	*argVec[] = {"ls", "-l", argv[1], NULL};
	t_program	arg;

	i = 2;
	if (argc > 2) //maior que 5
	{
		if (pipe(fd) == -1)
			perror ("pipe");
		pid = fork();
		if (pid == -1)
			perror ("fork");
		else if (pid == 0)
		{
			path = check_access(get_path(envp), argv[i]);
			fd[0] = open(argv[1], O_RDONLY);
			fd[1] = open(argv[argc - 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
			dup2(fd[1], 1);
			if (execve(path, argVec, envp) == -1)
				perror("could not execute\n");
			// free(path);
			}
/* 		else if (pid != 0) //esta sempre a fazer o parent process 
			printf("Something went wrong\n");  */
	}
}


checkar nodes

int	main(int argc, char **argv, char **envp)
{
	t_program	*list;
	t_program	*curr;
	//int			pid;
	int x;

	list = 0;
	if (argc >= 5)
	{
		fill_list(&list, argc, argv, envp);
		curr = list;
		while (curr && curr->i <= argc - 2)
		{
			printf ("para o curr->i = %d o i = %d\n", curr->i, curr->i);
			if (pipe(curr->fd) == -1)
				perror ("pipe");
			set_fd(curr, &list, argc, argv);
			// pid = fork();
			printf ("para o curr = %d o fd[0] = %d\n", curr->i, curr->fd[0]);
			printf ("para o curr = %d o fd[1] = %d\n", curr->i, curr->fd[1]);
			printf ("para o curr = %d o curr->path = %s\n", curr->i, curr->path);
			x = 0;
			while (curr->flags[x])
				printf ("para o curr = %d as flags sao = %s\n", curr->i, curr->flags[x++]);
			// if (pid == -1)
			// 	perror ("fork");
			// if (pid == 0)
			// {
			// 	dup2(curr->fd[0], 0);
			// 	dup2(curr->fd[1], 1);
			// 	if (execve(curr->path, curr->flags, envp) == -1)
			// 		perror("could not execute\n");
			// 	// free(path);
			// }
			curr = curr->next;
		}
		// while (waitpid(-1, NULL, WNOHANG))
		// {
		// }
		free_my_list(list);
	}
}


ALL WORKING!!! ?

int	main(int argc, char **argv, char **envp)
{
	t_program	*list;
	t_program	*curr;
	int			pid;

	list = 0;
	if (argc >= 5)
	{
		fill_list(&list, argc, argv, envp);
		curr = list;
		while (curr && curr->i <= argc - 2)
		{
			if (pipe(curr->fd) == -1)
				perror ("pipe");
			pid = fork();
			if (pid == -1)
				perror ("fork");
			if (pid == 0)
			{
				set_fd(curr, &list, argc, argv);
				printf("o fd[0] do curr->%d = curr->[%d]\n", curr->i, curr->fd[0]);				
				printf("o fd[1] do curr->%d = curr->[%d]\n", curr->i, curr->fd[1]);
				dup2(curr->fd[0], 0);
				close(curr->fd[0]);
				dup2(curr->fd[1], 1);
				close(curr->fd[1]);
				if (execve(curr->path, curr->flags, envp) == -1)
					perror("could not execute\n");
			}
			curr = curr->next;
		}
		while (waitpid(-1, NULL, WNOHANG))
		{
		}
		free_my_list(list);
	}
}


TODO

limpar printfs
protecao para nao haver infile - OK
protecao para nao encontrar comandos - OK
correr norminette
close fd no free_my_list?